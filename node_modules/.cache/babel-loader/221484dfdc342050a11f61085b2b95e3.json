{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js!D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\views\\login\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\views\\login\\index.vue","mtime":1590739533655},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar _slideVerify = _interopRequireDefault(require(\"@/components/slide-verify\"));\n\nvar _router = require(\"@/router\");\n\nvar _permission = require(\"../../permission\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//引入验证码组件\nvar _default = {\n  name: 'Login',\n  components: {\n    SlideVerify: _slideVerify.default\n  },\n  computed: {\n    //滑动验证码背景图来源\n    imgs: function imgs() {\n      var imgs = [];\n\n      for (var i = 1; i < 13; i++) {\n        imgs.push(require(\"../../assets/slide-verify/bg-img/\".concat(i, \".jpg\")));\n      }\n\n      return imgs;\n    }\n  },\n  data: function data() {\n    var validateUsername = function validateUsername(rule, value, callback) {\n      if (value.length == 0) {\n        callback(new Error('Please enter the user number'));\n      } else {\n        callback();\n      }\n    };\n\n    var validatePassword = function validatePassword(rule, value, callback) {\n      if (value.length == 0) {\n        callback(new Error('Please enter the password'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      loginForm: {\n        number: '',\n        password: ''\n      },\n      loginRules: {\n        number: [{\n          required: true,\n          trigger: 'blur',\n          validator: validateUsername\n        }],\n        password: [{\n          required: true,\n          trigger: 'blur',\n          validator: validatePassword\n        }]\n      },\n      loading: false,\n      passwordType: 'password',\n      verifySuccess: false\n    };\n  },\n  watch: {\n    $route: {\n      handler: function handler(route) {\n        this.redirect = route.query && route.query.redirect;\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    showPwd: function showPwd() {\n      var _this = this;\n\n      if (this.passwordType === 'password') {\n        this.passwordType = '';\n      } else {\n        this.passwordType = 'password';\n      }\n\n      this.$nextTick(function () {\n        _this.$refs.password.focus();\n      });\n    },\n    //点击login后的处理逻辑，即进行用户名和密码验证\n    handleLogin: function handleLogin() {\n      var _this2 = this;\n\n      if (!this.verifySuccess) {\n        this.$message.error('请拖动滑块以验证');\n        return;\n      }\n      /*ref:被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。\n      如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；\n      如果用在子组件上，引用就指向组件*/\n\n      /*vm.$refs:一个对象，持有注册过 ref attribute 的所有 DOM 元素和组件实例。*/\n\n\n      this.$refs.loginForm.validate(function (valid) {\n        // this.$refs.loginForm用于访问 <el-form/>实例\n        if (valid) {\n          //请求后端\n          _this2.$http.post('/user/login', {\n            //请求参数\n            number: _this2.loginForm.number,\n            password: _this2.loginForm.password\n          }).then(function (user) {\n            //登录成功\n            if (user && user.id) {\n              _this2.$message.success('登录成功！'); //先存储用户信息\n\n\n              sessionStorage.setItem('user', JSON.stringify(user)); //存放用户信息，随时读取\n              //根据用户角色过滤符合角色权限的路由放到sessionstore中  constantRoutes是router\\index.js的\n\n              var roles = [user.type]; //accessedRoutes存储符合权限的路由\n\n              var accessedRoutes = [];\n\n              if (roles.includes('0')) {\n                accessedRoutes = _router.constantRoutes || [];\n              } else {\n                accessedRoutes = (0, _permission.filterAsyncRoutes)(_router.constantRoutes, roles);\n              }\n\n              sessionStorage.setItem('routes', JSON.stringify(accessedRoutes)); //跳转路由\n\n              _this2.$router.push({\n                path: '/dashboard'\n              }); //登录失败\n\n            } else {\n              _this2.$message.error('登录失败，请检查用户名或密码！');\n            }\n          }).catch(function (v) {\n            _this2.$message.error('登录失败，请检查用户名或密码！');\n          });\n        }\n      });\n    },\n    //拖动验证码验证成功\n    verifyHandleSuccess: function verifyHandleSuccess() {\n      this.verifySuccess = true;\n      console.log('verifySuccess');\n    },\n    //拖动验证码验证失败\n    verifyHandlefail: function verifyHandlefail() {\n      this.verifySuccess = false;\n    }\n  }\n};\nexports.default = _default;",null]}