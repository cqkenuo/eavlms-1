{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js!D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\components\\slide-verify\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\components\\slide-verify\\index.vue","mtime":1587568112791},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar PI = Math.PI;\n\nfunction sum(x, y) {\n  return x + y;\n}\n\nfunction square(x) {\n  return x * x;\n}\n\nvar _default2 = {\n  name: 'SlideVerify',\n  props: {\n    // block length\n    l: {\n      type: Number,\n      default: 42\n    },\n    // block radius\n    r: {\n      type: Number,\n      default: 10\n    },\n    // canvas width\n    w: {\n      type: Number,\n      default: 310\n    },\n    // canvas height\n    h: {\n      type: Number,\n      default: 155\n    },\n    sliderText: {\n      type: String,\n      default: 'Slide filled right'\n    },\n    accuracy: {\n      type: Number,\n      default: 5 // 若为 -1 则不进行机器判断\n\n    },\n    show: {\n      type: Boolean,\n      default: true\n    },\n    imgs: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      showCanvas: false,\n      containerActive: false,\n      // container active class\n      containerSuccess: false,\n      // container success class\n      containerFail: false,\n      // container fail class\n      canvasCtx: null,\n      blockCtx: null,\n      block: null,\n      block_x: undefined,\n      // container random position\n      block_y: undefined,\n      L: this.l + this.r * 2 + 3,\n      // block real lenght\n      img: undefined,\n      originX: undefined,\n      originY: undefined,\n      isMouseDown: false,\n      trail: [],\n      sliderLeft: 0,\n      // block right offset\n      sliderMaskWidth: 0 // mask width\n\n    };\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      this.initDom();\n      this.initImg();\n      this.bindEvents();\n    },\n    initDom: function initDom() {\n      this.block = this.$refs.block;\n      this.canvasCtx = this.$refs.canvas.getContext('2d');\n      this.blockCtx = this.block.getContext('2d');\n    },\n    initImg: function initImg() {\n      var _this = this;\n\n      var img = this.createImg(function () {\n        _this.drawBlock();\n\n        _this.canvasCtx.drawImage(img, 0, 0, _this.w, _this.h);\n\n        _this.blockCtx.drawImage(img, 0, 0, _this.w, _this.h);\n\n        var x = _this.block_x,\n            y = _this.block_y,\n            r = _this.r,\n            L = _this.L;\n\n        var _y = y - r * 2 - 1;\n\n        var ImageData = _this.blockCtx.getImageData(x, _y, L, L);\n\n        _this.block.width = L;\n\n        _this.blockCtx.putImageData(ImageData, 0, _y);\n      });\n      this.img = img;\n    },\n    drawBlock: function drawBlock() {\n      this.block_x = this.getRandomNumberByRange(this.L + 10, this.w - (this.L + 10));\n      this.block_y = this.getRandomNumberByRange(10 + this.r * 2, this.h - (this.L + 10));\n      this.draw(this.canvasCtx, this.block_x, this.block_y, 'fill');\n      this.draw(this.blockCtx, this.block_x, this.block_y, 'clip');\n    },\n    draw: function draw(ctx, x, y, operation) {\n      var l = this.l,\n          r = this.r;\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.arc(x + l / 2, y - r + 2, r, 0.72 * PI, 2.26 * PI);\n      ctx.lineTo(x + l, y);\n      ctx.arc(x + l + r - 2, y + l / 2, r, 1.21 * PI, 2.78 * PI);\n      ctx.lineTo(x + l, y + l);\n      ctx.lineTo(x, y + l);\n      ctx.arc(x + r - 2, y + l / 2, r + 0.4, 2.76 * PI, 1.24 * PI, true);\n      ctx.lineTo(x, y);\n      ctx.lineWidth = 2;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.stroke();\n      ctx[operation]();\n      ctx.globalCompositeOperation = 'overlay';\n    },\n    createImg: function createImg(onload) {\n      var _this2 = this;\n\n      var img = document.createElement('img');\n      img.crossOrigin = \"Anonymous\";\n      img.onload = onload;\n\n      img.onerror = function () {\n        img.src = _this2.getRandomImg();\n      };\n\n      img.src = this.getRandomImg();\n      return img;\n    },\n    // 随机生成img src\n    getRandomImg: function getRandomImg() {\n      var len = this.imgs.length;\n      return len > 0 ? this.imgs[this.getRandomNumberByRange(0, len)] : 'https://picsum.photos/300/150/?image=' + this.getRandomNumberByRange(0, 1084);\n    },\n    getRandomNumberByRange: function getRandomNumberByRange(start, end) {\n      return Math.round(Math.random() * (end - start) + start);\n    },\n    refresh: function refresh() {\n      this.reset();\n      this.$emit('refresh');\n    },\n    sliderDown: function sliderDown(event) {\n      this.originX = event.clientX;\n      this.originY = event.clientY;\n      this.isMouseDown = true;\n    },\n    touchStartEvent: function touchStartEvent(e) {\n      this.originX = e.changedTouches[0].pageX;\n      this.originY = e.changedTouches[0].pageY;\n      this.isMouseDown = true;\n    },\n    bindEvents: function bindEvents() {\n      var _this3 = this;\n\n      document.addEventListener('mousemove', function (e) {\n        if (!_this3.isMouseDown) return false;\n        var moveX = e.clientX - _this3.originX;\n        var moveY = e.clientY - _this3.originY;\n        if (moveX < 0 || moveX + 38 >= _this3.w) return false;\n        _this3.sliderLeft = moveX + 'px';\n        var blockLeft = (_this3.w - 40 - 20) / (_this3.w - 40) * moveX;\n        _this3.block.style.left = blockLeft + 'px';\n        _this3.containerActive = true; // add active\n\n        _this3.sliderMaskWidth = moveX + 'px';\n\n        _this3.trail.push(moveY);\n      });\n      document.addEventListener('mouseup', function (e) {\n        if (!_this3.isMouseDown) return false;\n        _this3.isMouseDown = false;\n        if (e.clientX === _this3.originX) return false;\n        _this3.containerActive = false; // remove active\n\n        var _this3$verify = _this3.verify(),\n            spliced = _this3$verify.spliced,\n            TuringTest = _this3$verify.TuringTest;\n\n        if (spliced) {\n          if (_this3.accuracy === -1) {\n            _this3.containerSuccess = true;\n\n            _this3.$emit('success');\n\n            return;\n          }\n\n          if (TuringTest) {\n            // succ\n            _this3.containerSuccess = true;\n\n            _this3.$emit('success');\n          } else {\n            _this3.containerFail = true;\n\n            _this3.$emit('again');\n          }\n        } else {\n          _this3.containerFail = true;\n\n          _this3.$emit('fail');\n\n          setTimeout(function () {\n            _this3.reset();\n          }, 1000);\n        }\n      });\n    },\n    touchMoveEvent: function touchMoveEvent(e) {\n      if (!this.isMouseDown) return false;\n      var moveX = e.changedTouches[0].pageX - this.originX;\n      var moveY = e.changedTouches[0].pageY - this.originY;\n      if (moveX < 0 || moveX + 38 >= this.w) return false;\n      this.sliderLeft = moveX + 'px';\n      var blockLeft = (this.w - 40 - 20) / (this.w - 40) * moveX;\n      this.block.style.left = blockLeft + 'px';\n      this.containerActive = true;\n      this.sliderMaskWidth = moveX + 'px';\n      this.trail.push(moveY);\n    },\n    touchEndEvent: function touchEndEvent(e) {\n      var _this4 = this;\n\n      if (!this.isMouseDown) return false;\n      this.isMouseDown = false;\n      if (e.changedTouches[0].pageX === this.originX) return false;\n      this.containerActive = false;\n      this.showCanvas = false;\n\n      var _this$verify = this.verify(),\n          spliced = _this$verify.spliced,\n          TuringTest = _this$verify.TuringTest;\n\n      if (spliced) {\n        if (this.accuracy === -1) {\n          this.containerSuccess = true;\n          this.$emit('success');\n          return;\n        }\n\n        if (TuringTest) {\n          // succ\n          this.containerSuccess = true;\n          this.$emit('success');\n        } else {\n          this.containerFail = true;\n          this.$emit('again');\n        }\n      } else {\n        this.containerFail = true;\n        this.$emit('fail');\n        setTimeout(function () {\n          _this4.reset();\n        }, 1000);\n      }\n    },\n    verify: function verify() {\n      var arr = this.trail; // drag y move distance\n\n      var average = arr.reduce(sum) / arr.length; // average\n\n      var deviations = arr.map(function (x) {\n        return x - average;\n      }); // deviation array\n\n      var stddev = Math.sqrt(deviations.map(square).reduce(sum) / arr.length); // standard deviation\n\n      var left = parseInt(this.block.style.left);\n      var accuracy = this.accuracy <= 1 ? 1 : this.accuracy > 10 ? 10 : this.accuracy;\n      return {\n        spliced: Math.abs(left - this.block_x) <= accuracy,\n        TuringTest: average !== stddev // equal => not person operate\n\n      };\n    },\n    reset: function reset() {\n      this.containerActive = false;\n      this.containerSuccess = false;\n      this.containerFail = false;\n      this.sliderLeft = 0;\n      this.block.style.left = 0;\n      this.sliderMaskWidth = 0; // canvas\n\n      var w = this.w,\n          h = this.h;\n      this.canvasCtx.clearRect(0, 0, w, h);\n      this.blockCtx.clearRect(0, 0, w, h);\n      this.block.width = w; // generate img\n\n      this.img.src = this.getRandomImg();\n      this.$emit('fulfilled');\n    }\n  }\n};\nexports.default = _default2;",null]}