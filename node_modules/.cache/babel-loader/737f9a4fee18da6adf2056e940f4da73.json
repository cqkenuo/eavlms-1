{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js!D:\\0毕设相关\\EAvLMS\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\0毕设相关\\EAvLMS\\src\\permission.js","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\permission.js","mtime":1587992547534},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterAsyncRoutes = filterAsyncRoutes;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _router = _interopRequireWildcard(require(\"./router\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _nprogress = _interopRequireDefault(require(\"nprogress\"));\n\nrequire(\"nprogress/nprogress.css\");\n\n//前端路由鉴权\n// import store from './store'\n// progress bar\n// progress bar style\n_nprogress.default.configure({\n  showSpinner: false\n}); // NProgress Configuration\n\n\nvar whiteList = ['/login']; // no redirect whitelist\n//路由之前的事件\n\n_router.default.beforeEach(\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(to, from, next) {\n    var user;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // start progress bar\n            _nprogress.default.start(); //鉴权\n\n\n            if (to.path === '/login') {\n              next();\n            } else {\n              user = sessionStorage.getItem('user');\n\n              if (user) {\n                //   //保存验证通过的路由\n                //   let roles = [user.type]\n                //   //符合权限的路由\n                //   let accessedRoutes\n                //   if (roles.includes('0')) {\n                //     accessedRoutes = asyncRoutes || []\n                //   } else {\n                //     accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)\n                //   }\n                //   console.log('accessedRoutes',accessedRoutes)\n                //   console.log('router',router)\n                // router.addRoutes(accessedRoutes)\n                next();\n              } else {\n                _elementUi.Message.error('尚未登陆！');\n\n                next({\n                  path: '/login'\n                });\n              }\n            }\n\n            _nprogress.default.done();\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}()); // set page title\n////document.title = getPageTitle(to.meta.title)\n// determine whether the user has logged in\n// const hasToken = getToken()\n//\n// if (hasToken) {\n//   if (to.path === '/login') {\n//     // if is logged in, redirect to the home page\n//     next({ path: '/' })\n//     NProgress.done()\n//   } else {\n//     const hasGetUserInfo = store.getters.name\n//     if (hasGetUserInfo) {\n//       next()\n//     } else {\n//       try {\n//         // get user info\n//         await store.dispatch('user/getInfo')\n//\n//         next()\n//       } catch (error) {\n//         // remove token and go to login page to re-login\n//         await store.dispatch('user/resetToken')\n//         Message.error(error || 'Has Error')\n//         next(`/login?redirect=${to.path}`)\n//         NProgress.done()\n//       }\n//     }\n//   }\n// } else {\n//   /* has no token*/\n//\n//   if (whiteList.indexOf(to.path) !== -1) {\n//     // in the free login whitelist, go directly\n//     next()\n//   } else {\n//     // other pages that do not have permission to access are redirected to the login page.\n//     next(`/login?redirect=${to.path}`)\n//路由之后的事件\n\n\n_router.default.afterEach(function () {\n  // finish progress bar\n  _nprogress.default.done();\n}); //判断role字段的权限\n\n\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return roles.some(function (role) {\n      return route.meta.roles.includes(role);\n    });\n  } else {\n    return true;\n  }\n} //添加路由\n\n\nfunction filterAsyncRoutes(routes, roles) {\n  var res = [];\n  routes.forEach(function (route) {\n    var tmp = (0, _objectSpread2.default)({}, route);\n\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles);\n      }\n\n      res.push(tmp);\n    }\n  });\n  return res;\n}",null]}