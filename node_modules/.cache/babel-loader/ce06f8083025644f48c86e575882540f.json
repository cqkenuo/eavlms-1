{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js!D:\\0毕设相关\\EAvLMS\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\0毕设相关\\EAvLMS\\src\\utils\\http-plugin.js","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\utils\\http-plugin.js","mtime":1590470748410},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = install;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _remoteUrl = _interopRequireDefault(require(\"./remote-url\"));\n\n//函数名固定写法\nfunction install(Vue, options) {\n  //给Vue添加http请求字段，以后直接用this就可以获取，此时$http成为全局Vue对象；（在原型上定义它们使其在每个 Vue 的实例中可用）\n  Vue.prototype.$http = {\n    //http这个对象有以下四个方法，其各自的主要内容在下方封装内容里；$符号目的：避免和已被定义的数据、方法、计算属性产生冲突\n    get: getHttp,\n    post: postHttp,\n    put: putHttp,\n    delete: deleteHttp\n  };\n} //get请求封装\n\n\nfunction getHttp(url, params) {\n  //括号()代表执行函数\n  console.log(_remoteUrl.default + url + \"?\".concat(new URLSearchParams(params).toString())); //$开头的字段名注入到vue对象中，整个系统可用，不用每次进行new urlsearchparams，因为下面一行对传入的参数进行了格式化\n\n  return window.fetch(_remoteUrl.default + url + \"?\".concat(new URLSearchParams(params).toString()), {\n    method: \"GET\"\n  }).then(function (response) {\n    return response.json();\n  });\n} //post请求封装\n\n\nfunction postHttp(url, params) {\n  return window.fetch(_remoteUrl.default + url, {\n    method: \"POST\",\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(params) //请求体内容：把对象转为json 用于传输 序列化\n\n  }).then(function (response) {\n    return response.json();\n  }); //response => response.json()该箭头函数中，response指响应包中的全部内容，response.json()将返回体中的json字符串   转为对象传递给v 反序列化  没有返回的json的就传null给v\n} //put请求封装\n\n\nfunction putHttp(url, params) {\n  return window.fetch(_remoteUrl.default + url, {\n    method: \"PUT\",\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(params)\n  }).then(function (response) {\n    return response.json();\n  });\n} //delete请求封装\n\n\nfunction deleteHttp(url, params) {\n  return window.fetch(_remoteUrl.default + url + \"?\".concat(new URLSearchParams(params).toString()), {\n    //es6 `${需要拼接进去的字符串变量}` 模板字符串\n    method: \"DELETE\"\n  }).then(function (response) {\n    return response.json();\n  });\n}",null]}