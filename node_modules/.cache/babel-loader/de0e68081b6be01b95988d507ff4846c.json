{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js!D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\views\\table\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\views\\table\\index.vue","mtime":1590399120505},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nvar _remoteUrl = _interopRequireDefault(require(\"../../utils/remote-url\"));\n\nvar _export2excel = require(\"@/utils/export2excel\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  filters: {\n    ellipsis: function ellipsis(value) {\n      if (!value) return '';\n\n      if (value.length > 30) {\n        return value.slice(0, 30) + '...';\n      }\n\n      return value;\n    }\n  },\n  data: function data() {\n    return {\n      //返回给当前组件数据 固定写法\n      list: [],\n      listLoading: true,\n      //{key:value}格式赋值\n      search: {\n        cveid: '',\n        description: ''\n      },\n      dialogTableVisible: false,\n      //设置中间的dialogTableData参数接收scope数据，然后再从dialogTableData里提取分条数据\n      dialogTableData: {},\n      //对象\n      updateDialogVisible: false,\n      updateForm: {\n        cveid: '',\n        author: '',\n        description: '',\n        reference: '',\n        updatetime: ''\n      },\n      pageSize: 10,\n      total: 0,\n      currentPage: 1\n    };\n  },\n  created: function created() {\n    this.getAll(); // this.listLoading = false\n    //\n    // // get方法的传参格式，类似于page=0&size=10\n    // const urlSearchParams = new URLSearchParams({\n    //   page: 0,\n    //   size: 10\n    // })\n    // // 发起异步请求\n    // fetch(url + '/cves/all?' + urlSearchParams.toString(), {\n    //   method: 'GET'\n    // })\n    //   // 请求返回json格式\n    //   .then(response => response.json())\n    //   // 真正服务器返回的数据，对响应的所有数据操作均在此函数内\n    //   .then(response => {\n    //     this.list = response.content\n    //   })\n  },\n  methods: {\n    getAll: function getAll() {\n      var _this = this;\n\n      this.listLoading = true;\n      this.$http.get('/cves/all', {\n        page: this.currentPage - 1,\n        //vue页码从1开始 后台从0开始 故-1\n        size: this.pageSize\n      }).then(function (response) {\n        _this.list = response.content; //page里的content字段，保存的是cves的list集合\n\n        _this.total = response.totalElements; //查回来的记录条总数\n\n        _this.listLoading = false;\n      });\n    },\n    deleteHandleClick: function deleteHandleClick(row) {\n      var _this2 = this;\n\n      console.log('row', row);\n      this.$confirm('此操作将永久删除, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _this2.$http.delete('/cves', {\n          cveid: row.cveid\n        }).then(function (response) {\n          console.log('response');\n\n          _this2.$message({\n            type: 'success',\n            message: '删除成功!'\n          });\n\n          _this2.getAll();\n        }).catch(function (res) {\n          _this2.getAll(function (response) {\n            _this2.$message({\n              type: 'success',\n              message: '删除成功!'\n            });\n\n            _this2.getAll();\n          });\n        });\n      }).catch(function () {// this.$message({\n        //   type: 'info',\n        //   message: '已取消删除'\n        // })\n      });\n    },\n    addHandleClick: function addHandleClick() {\n      this.updateForm = {};\n      this.updateDialogVisible = true;\n    },\n    updateHandleClick: function updateHandleClick(row) {\n      this.updateDialogVisible = true;\n      this.updateForm = row;\n    },\n    updateSubmit: function updateSubmit() {\n      var _this3 = this;\n\n      this.updateDialogVisible = false;\n      this.$http.post('/cves', (0, _objectSpread2.default)({}, this.updateForm)).then(function (res) {\n        _this3.$message({\n          type: 'success',\n          message: '修改成功!'\n        });\n\n        _this3.getAll();\n      });\n    },\n    downloadHandleClick: function downloadHandleClick() {\n      var header = ['cveid', 'author', 'description', 'reference', 'updatetime'];\n      var chineseHeader = ['Id', '更新人员', '漏洞描述', '参考资料', '更新时间'];\n      var tabledata = this.formatJson(header, this.list);\n      (0, _export2excel.export_json_to_excel)({\n        //导出excel\n        data: tabledata,\n        header: chineseHeader\n      });\n    },\n    //按照表头的顺序排好各行 赋值给tabledata\n    formatJson: function formatJson(filterVal, jsonData) {\n      //定下header表头 向内填数据 格式化数据  两个数组遍历\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          //j是表头\n          console.log('j', j);\n          console.log('j', v[j]);\n          return v[j]; //遍历当前行的各列\n        });\n      });\n    },\n    //查询按钮绑定的查询函数\n    queryCves: function queryCves(event) {\n      var _this4 = this;\n\n      var urlSearchParams = new URLSearchParams((0, _objectSpread2.default)({\n        page: 0,\n        size: 10\n      }, this.search));\n      fetch(_remoteUrl.default + '/cves?' + urlSearchParams.toString(), {\n        method: 'GET' //url=/cves?page=0&size=10&cveid=xxx&description=xxx\n\n      }) // 请求返回json格式\n      .then(function (response) {\n        return response.json();\n      }) // 真正服务器返回的数据，对响应的所有数据操作均在此函数内\n      .then(function (response) {\n        _this4.list = response.content;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}