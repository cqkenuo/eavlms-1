{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js!D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\views\\form\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\views\\form\\index.vue","mtime":1590416322061},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\0\\u6BD5\\u8BBE\\u76F8\\u5173\\\\EAvLMS\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _export2excel = require(\"@/utils/export2excel\");\n\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  data: function data() {\n    return {\n      list: [],\n      listLoading: true,\n      pageSize: 10,\n      total: 0,\n      currentPage: 1,\n      //输入表单\n      vulnForm: {\n        vulnsName: null,\n        vulnsRand: null,\n        vulnSystemName: null,\n        //登录后用户信息保存在sessionStorage，直接取值\n        vulnsCreatePerson: JSON.parse(sessionStorage.getItem('user')).username,\n        vulnsCreateTime: null,\n        vulnsDescription: null,\n        vulnsState: 0,\n        assets: {\n          id: null,\n          assetsUrl: null\n        }\n      },\n      //选择文件对话框显示与隐藏\n      fileDialogVisible: false,\n      //资产对话框\n      assetsDialogVisible: false,\n      //选择的资产对象\n      assetsSelection: null,\n      submitLoading: false\n    };\n  },\n  created: function created() {\n    this.getAllAssets();\n  },\n  methods: {\n    onRest: function onRest() {\n      this.restForm();\n    },\n    xlsxUploadSubmit: function xlsxUploadSubmit() {\n      console.log(this.$refs.xlsxUpload);\n      this.fileDialogVisible = false;\n    },\n    isExcel: function isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name); //test()是正则表达式方法，与模板匹配返回true 不匹配返回false \\.转义. //范围 $结束\n    },\n    xlsxUploadBefore: function xlsxUploadBefore(_ref) {\n      var file = _ref.file;\n      if (!file) return;\n\n      if (!this.isExcel(file)) {\n        this.$message({\n          text: '请选择XLSX文件'\n        });\n        return;\n      }\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.readData(file);\n      loading.close();\n    },\n    readData: function readData(file) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //promise 为了解决异步问题的内置对象 有三种状态 Pending（进行中）、Resolved（已完成）、Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n        //此处resolve和reject方法都没用到，以下代码是异步成功或失败都执行的\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var data = e.target.result;\n\n          var workbook = _xlsx.default.read(data, {\n            type: 'array'\n          });\n\n          var firstSheetName = workbook.SheetNames[0];\n          var worksheet = workbook.Sheets[firstSheetName];\n\n          var header = _this.getHeaderRow(worksheet);\n\n          var results = _xlsx.default.utils.sheet_to_json(worksheet); //读取文件格式转化\n\n\n          console.log('header', header);\n          console.log('results', results);\n\n          _this.generateData({\n            header: header,\n            results: results\n          }); //渲染数据到表格\n\n\n          resolve();\n        };\n\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    generateData: function generateData(_ref2) {\n      var header = _ref2.header,\n          results = _ref2.results;\n      //{}因为没有对象名 解构赋值； 直接（）是有对象名\n      this.vulnForm.vulnsName = results[0]['漏洞名']; //results[0]['漏洞名']取表格第一行的数据（数据仅一行）赋给变量vulnsname\n\n      this.vulnForm.vulnsRand = results[0]['漏洞等级'];\n      this.vulnForm.vulnSystemName = results[0]['系统名'];\n      this.vulnForm.vulnsCreateTime = results[0]['创建时间'];\n      this.vulnForm.vulnsDescription = results[0]['漏洞描述'];\n    },\n    getHeaderRow: function getHeaderRow(sheet) {\n      var headers = [];\n\n      var range = _xlsx.default.utils.decode_range(sheet['!ref']);\n\n      var C;\n      /*let声明变量 仅在let命令所在代码块内有效；var在方法内部是局部变量，在方法外部是全局变量*/\n\n      var R = range.s.r;\n      /* start in the first row */\n\n      for (C = range.s.c; C <= range.e.c; ++C) {\n        /* walk every column in the range */\n        var cell = sheet[_xlsx.default.utils.encode_cell({\n          c: C,\n          r: R\n        })];\n        /* find the cell in the first row */\n\n\n        var hdr = 'UNKNOWN ' + C; // <-- replace with your desired default\n\n        if (cell && cell.t) hdr = _xlsx.default.utils.format_cell(cell);\n        headers.push(hdr);\n      }\n\n      return headers;\n    },\n    onSubmit: function onSubmit() {\n      var _this2 = this;\n\n      this.submitLoading = true; //true：后端还未有数据传入时显示等待动画\n\n      if (this.assetsSelection == null) {\n        this.$message.error('请填写资产信息！');\n        this.submitLoading = false;\n        return;\n      }\n\n      this.$http.post('/assets-vulns', (0, _objectSpread2.default)({}, this.vulnForm, {\n        //将vulnForm对象进行解构，加入用户id和资产id 重新封装为对象传给后台public Vulns save(@RequestBody Vulns vulns)函数\n        createUser: {\n          id: JSON.parse(sessionStorage.getItem('user')).id //user定义:views/login/index.vue 154行  此为将json字符串转成对象取id\n\n        },\n        assets: {\n          id: this.list[this.assetsSelection].id\n        }\n      })).then(function (v) {\n        //v:指http-plugin.js中post请求then里已把对象转化为json的信息 或null 响应码非200走catch\n        console.log('onSubmit', v);\n        _this2.submitLoading = false;\n\n        _this2.$message({\n          message: '上报成功！',\n          type: 'success'\n        });\n\n        _this2.$refs.vulnForm.resetFields(); //清空\n\n\n        _this2.restForm();\n      }).catch(function (v) {\n        _this2.$message.error('上报失败！');\n      }); //当后端有数据返回时调用then函数，出错了就调用catch函数\n    },\n    downloadHandleClick: function downloadHandleClick() {\n      var header = ['vulnsName', 'vulnsRand', 'vulnSystemName', 'vulnsCreatePerson', 'vulnsCreateTime', 'vulnsDescription', 'vulnsState'];\n      var chineseHeader = ['漏洞名', '漏洞等级', '系统名', '创建人', '创建时间', '漏洞描述', '漏洞状态', '对应资产id', '对应资产URL'];\n      var tabledata = this.formatJson(header, [this.vulnForm]);\n      tabledata[0].push(this.vulnForm.assets.id);\n      tabledata[0].push(this.vulnForm.assets.assetsUrl);\n      (0, _export2excel.export_json_to_excel)({\n        data: tabledata,\n        header: chineseHeader\n      });\n    },\n    //按照表头的顺序排好各行 赋值给tabledata\n    formatJson: function formatJson(filterVal, jsonData) {\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          //map遍历返回数组 j是表头\n          console.log('j', j);\n          console.log('j', v[j]);\n          return v[j]; // 遍历当前行的各列\n        });\n      });\n    },\n    restForm: function restForm() {\n      this.assetsSelection = null;\n      this.$refs.vulnForm.resetFields();\n      this.vulnForm.assets = {};\n    },\n    assetsHandleClick: function assetsHandleClick() {\n      this.assetsDialogVisible = true;\n    },\n    assetsDialogSubmit: function assetsDialogSubmit() {\n      this.assetsDialogVisible = false;\n      this.vulnForm.assets = this.list[this.assetsSelection]; //选中的assets对象赋值给vulnform变量的assets对象\n    },\n    getAllAssets: function getAllAssets() {\n      var _this3 = this;\n\n      this.listLoading = true;\n      console.log({\n        page: this.currentPage - 1,\n        size: this.pageSize\n      });\n      this.$http.get('/assets-vulns/all', {\n        page: this.currentPage - 1,\n        size: this.pageSize\n      }).then(function (response) {\n        _this3.list = response.content;\n        _this3.total = response.totalElements;\n        _this3.listLoading = false;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}