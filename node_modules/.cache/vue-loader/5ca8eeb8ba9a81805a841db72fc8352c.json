{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\views\\globe\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\views\\globe\\index.vue","mtime":1590574162079},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\n// 加载echarts\nimport echarts from 'echarts/lib/echarts'\n\n// 加载数据,data.json在当前路径下\nimport jsonData from './data'\n\n// 必须引入gl组件,用来画飞线图\nimport 'echarts-gl'\n\n// 定义4种路线的颜色,根据不同的类型或级别显示线的不同的颜色\n\nexport default {\n  name: 'Index',\n\n  // vue data属性,可以用此属性动态加载数据动态渲染\n  data() {\n    return {}\n  },\n\n  // 当页面加载完毕后自动调用的函数，vue的生命周期函数\n  mounted() {\n    const myChart = echarts.init(window.document.getElementById('main'))  //初始化 把html的div和echarts绑定 使得有数据就开始渲染\n\n    this.$http.get('/ip/all').then(res => {\n      console.log(res)\n      // 显示的地图具体的配置\n      myChart.setOption({\n        // 背景颜色\n        backgroundColor: '#000',\n        // 地球的详细配置\n        globe: {\n          // 贴图\n          baseTexture: require('../../assets/globe/base-texture.jpg'),\n          heightTexture: require('../../assets/globe/height-texture.jpg'),\n\n          shading: 'lambert',\n\n          // 路径是否动态\n          postEffect: {\n            enable: true\n          },\n\n          // 地球内半径\n          globeRadius: 80,\n\n          // 地球外半径\n          globeOuterRadius: 120,\n\n          // 外界灯光设置\n          light: {\n            ambient: {\n              intensity: 0.4\n            },\n            main: {\n              intensity: 0.4\n            }\n          },\n\n          viewControl: {\n\n            // 是否自动旋转\n            autoRotate: true,\n            animationDurationUpdate: 2000,\n            targetCoord: ''\n          }\n        },\n        // 外围3D线的具体设置\n        series: {\n\n          // 类型\n          type: 'lines3D',\n          coordinateSystem: 'globe',\n          blendMode: 'source-over',\n\n          // 动态飞线的配置，类似于飞机的尾迹,是沿静态线动态变化的,静态线是不动的\n          effect: {\n            show: true,\n\n            // 周期,也就是速度\n            period: 4,\n\n            // 动态线宽度\n            trailWidth: 1,\n\n            // 长度,占静态线的百分比\n            trailLength: 0.3,\n\n            // 透明度\n            trailOpacity: 0.3\n\n            // 设置颜色,在43行已经配置\n            // trailColor: 'rgb(29,56,150)'\n          },\n\n          // 静态线的配置,静止不动的\n          lineStyle: {\n\n            // 静态线宽度\n            width: 1.5,\n\n            // 静态线的颜色\n            color: 'rgb(29,56,150)',\n\n            // 透明度\n            opacity: 0.02\n          },\n\n          // 传给echarts的数据\n          data: res\n        }\n      })\n      this.$emit('chartSuccess', true)  //$emit 实现子组件向父组件通信\n      this.$emit('dataList', res)\n    })\n  },\n\n  methods: {\n\n    // 转换数据的格式,只用json里面的第3维和第四维\n    getAirportCoord(idx) {\n      return [jsonData.airports[idx][3], jsonData.airports[idx][4]]\n    }\n  }\n}\n",null]}