{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\views\\login\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\views\\login\\index.vue","mtime":1590739533655},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//引入验证码组件\nimport SlideVerify from '@/components/slide-verify'\nimport { constantRoutes } from '@/router'\nimport { filterAsyncRoutes } from '../../permission'\n\nexport default {\n  name: 'Login',\n  components: {\n    SlideVerify\n  },\n  computed: {\n    //滑动验证码背景图来源\n    imgs() {\n      let imgs = []\n      for (let i = 1; i < 13; i++) {\n        imgs.push(require(`../../assets/slide-verify/bg-img/${i}.jpg`))\n      }\n      return imgs\n    }\n  },\n  data() {\n    const validateUsername = (rule, value, callback) => {\n      if (value.length == 0) {\n        callback(new Error('Please enter the user number'))\n      } else {\n        callback()\n      }\n    }\n    const validatePassword = (rule, value, callback) => {\n      if (value.length == 0) {\n        callback(new Error('Please enter the password'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      loginForm: {\n        number: '',\n        password: ''\n      },\n      loginRules: {\n        number: [{ required: true, trigger: 'blur', validator: validateUsername }],\n        password: [{ required: true, trigger: 'blur', validator: validatePassword }]\n      },\n      loading: false,\n      passwordType: 'password',\n      verifySuccess: false\n    }\n  },\n  watch: {\n    $route: {\n      handler: function(route) {\n        this.redirect = route.query && route.query.redirect\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    showPwd() {\n      if (this.passwordType === 'password') {\n        this.passwordType = ''\n      } else {\n        this.passwordType = 'password'\n      }\n      this.$nextTick(() => {\n        this.$refs.password.focus()\n      })\n    },\n    //点击login后的处理逻辑，即进行用户名和密码验证\n    handleLogin() {\n      if (!this.verifySuccess) {\n        this.$message.error('请拖动滑块以验证')\n        return\n      }\n      /*ref:被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。\n      如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；\n      如果用在子组件上，引用就指向组件*/\n      /*vm.$refs:一个对象，持有注册过 ref attribute 的所有 DOM 元素和组件实例。*/\n      this.$refs.loginForm.validate(valid => {    // this.$refs.loginForm用于访问 <el-form/>实例\n        if (valid) {\n          //请求后端\n          this.$http.post('/user/login', {\n            //请求参数\n            number: this.loginForm.number,\n            password: this.loginForm.password\n          }).then(user => {\n            //登录成功\n            if (user && user.id) {\n              this.$message.success('登录成功！')\n              //先存储用户信息\n              sessionStorage.setItem('user', JSON.stringify(user))  //存放用户信息，随时读取\n\n              //根据用户角色过滤符合角色权限的路由放到sessionstore中  constantRoutes是router\\index.js的\n              let roles = [user.type]\n              //accessedRoutes存储符合权限的路由\n              let accessedRoutes=[]\n              if (roles.includes('0')) {\n                accessedRoutes = constantRoutes || []\n              } else {\n                accessedRoutes = filterAsyncRoutes(constantRoutes, roles)\n              }\n              sessionStorage.setItem('routes', JSON.stringify(accessedRoutes))\n              //跳转路由\n              this.$router.push({ path: '/dashboard' })\n              //登录失败\n            } else {\n              this.$message.error('登录失败，请检查用户名或密码！')\n            }\n          }).catch(v => {\n            this.$message.error('登录失败，请检查用户名或密码！')\n          })\n        }\n      })\n    },\n    //拖动验证码验证成功\n    verifyHandleSuccess() {\n      this.verifySuccess = true\n      console.log('verifySuccess')\n    },\n    //拖动验证码验证失败\n    verifyHandlefail() {\n      this.verifySuccess = false\n    }\n\n  }\n}\n",null]}