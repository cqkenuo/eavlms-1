{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\views\\form\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\views\\form\\index.vue","mtime":1590416322061},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { export_json_to_excel, formatJson } from '@/utils/export2excel'\nimport XLSX from 'xlsx'\n\nexport default {\n  data() {\n    return {\n      list: [],\n      listLoading: true,\n      pageSize: 10,\n      total: 0,\n      currentPage: 1,\n      //输入表单\n      vulnForm: {\n        vulnsName: null,\n        vulnsRand: null,\n        vulnSystemName: null,\n        //登录后用户信息保存在sessionStorage，直接取值\n        vulnsCreatePerson: JSON.parse(sessionStorage.getItem('user')).username,\n        vulnsCreateTime: null,\n        vulnsDescription: null,\n        vulnsState: 0,\n        assets: {\n          id: null,\n          assetsUrl: null\n        }\n      },\n      //选择文件对话框显示与隐藏\n      fileDialogVisible: false,\n      //资产对话框\n      assetsDialogVisible: false,\n      //选择的资产对象\n      assetsSelection: null,\n      submitLoading: false\n    }\n  },\n  created() {\n    this.getAllAssets()\n  },\n  methods: {\n    onRest() {\n      this.restForm()\n    },\n    xlsxUploadSubmit() {\n      console.log(this.$refs.xlsxUpload)\n      this.fileDialogVisible = false\n    },\n    isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name)   //test()是正则表达式方法，与模板匹配返回true 不匹配返回false \\.转义. //范围 $结束\n    },\n    xlsxUploadBefore({ file }) {\n      if (!file) return\n      if (!this.isExcel(file)) {\n        this.$message({\n          text: '请选择XLSX文件'\n        })\n        return\n      }\n      const loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      })\n      this.readData(file)\n      loading.close()\n    },\n    readData(file) {\n      return new Promise((resolve, reject) => {  //promise 为了解决异步问题的内置对象 有三种状态 Pending（进行中）、Resolved（已完成）、Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n       //此处resolve和reject方法都没用到，以下代码是异步成功或失败都执行的\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)  //读取文件格式转化\n          console.log('header', header)\n          console.log('results', results)\n          this.generateData({ header, results })  //渲染数据到表格\n          resolve()\n        }\n        reader.readAsArrayBuffer(file)\n      })\n    },\n    generateData({ header, results }) {  //{}因为没有对象名 解构赋值； 直接（）是有对象名\n      this.vulnForm.vulnsName = results[0]['漏洞名']   //results[0]['漏洞名']取表格第一行的数据（数据仅一行）赋给变量vulnsname\n      this.vulnForm.vulnsRand = results[0]['漏洞等级']\n      this.vulnForm.vulnSystemName = results[0]['系统名']\n      this.vulnForm.vulnsCreateTime = results[0]['创建时间']\n      this.vulnForm.vulnsDescription = results[0]['漏洞描述']\n    },\n    getHeaderRow(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C   /*let声明变量 仅在let命令所在代码块内有效；var在方法内部是局部变量，在方法外部是全局变量*/\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n\n    onSubmit() {\n      this.submitLoading = true  //true：后端还未有数据传入时显示等待动画\n      if (this.assetsSelection == null) {\n        this.$message.error('请填写资产信息！')\n        this.submitLoading = false\n        return\n      }\n      this.$http.post('/assets-vulns', {\n        ...this.vulnForm, //将vulnForm对象进行解构，加入用户id和资产id 重新封装为对象传给后台public Vulns save(@RequestBody Vulns vulns)函数\n        createUser: {\n          id: JSON.parse(sessionStorage.getItem('user')).id   //user定义:views/login/index.vue 154行  此为将json字符串转成对象取id\n        },\n        assets: { id: this.list[this.assetsSelection].id }\n      }).then(v => {   //v:指http-plugin.js中post请求then里已把对象转化为json的信息 或null 响应码非200走catch\n        console.log('onSubmit', v)\n        this.submitLoading = false\n        this.$message({\n          message: '上报成功！',\n          type: 'success'\n        })\n        this.$refs.vulnForm.resetFields()   //清空\n        this.restForm()\n      }).catch(v => {\n        this.$message.error('上报失败！')\n      })    //当后端有数据返回时调用then函数，出错了就调用catch函数\n    },\n    downloadHandleClick() {\n      let header = [\n        'vulnsName',\n        'vulnsRand',\n        'vulnSystemName',\n        'vulnsCreatePerson',\n        'vulnsCreateTime',\n        'vulnsDescription',\n        'vulnsState'\n      ]\n\n      let chineseHeader = [\n        '漏洞名',\n        '漏洞等级',\n        '系统名',\n        '创建人',\n        '创建时间',\n        '漏洞描述',\n        '漏洞状态',\n        '对应资产id',\n        '对应资产URL'\n      ]\n      let tabledata = this.formatJson(header, [this.vulnForm])\n      tabledata[0].push(this.vulnForm.assets.id)\n      tabledata[0].push(this.vulnForm.assets.assetsUrl)\n      export_json_to_excel({\n        data: tabledata,\n        header: chineseHeader\n      })\n    },\n    //按照表头的顺序排好各行 赋值给tabledata\n    formatJson(filterVal, jsonData) {\n      return jsonData.map(v => filterVal.map(j => {  //map遍历返回数组 j是表头\n        console.log('j', j)\n        console.log('j', v[j])\n        return v[j]  // 遍历当前行的各列\n      }))\n    },\n    restForm() {\n      this.assetsSelection = null\n      this.$refs.vulnForm.resetFields()\n      this.vulnForm.assets = {}\n    },\n    assetsHandleClick() {\n      this.assetsDialogVisible = true\n    },\n    assetsDialogSubmit() {\n      this.assetsDialogVisible = false\n      this.vulnForm.assets = this.list[this.assetsSelection]  //选中的assets对象赋值给vulnform变量的assets对象\n    },\n    getAllAssets() {\n      this.listLoading = true\n      console.log({\n        page: this.currentPage - 1,\n        size: this.pageSize\n      })\n      this.$http.get('/assets-vulns/all', {\n        page: this.currentPage - 1,\n        size: this.pageSize\n      }).then(response => {\n        this.list = response.content\n        this.total = response.totalElements\n        this.listLoading = false\n      })\n    }\n  }\n}\n",null]}