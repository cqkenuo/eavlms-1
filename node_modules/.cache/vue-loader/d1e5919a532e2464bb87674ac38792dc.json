{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\components\\slide-verify\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\components\\slide-verify\\index.vue","mtime":1587568112791},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst PI = Math.PI;\n\nfunction sum(x, y) {\n  return x + y\n}\n\nfunction square(x) {\n  return x * x\n}\n\nexport default {\n  name: 'SlideVerify',\n  props: {\n    // block length\n    l: {\n      type: Number,\n      default: 42,\n    },\n    // block radius\n    r: {\n      type: Number,\n      default: 10,\n    },\n    // canvas width\n    w: {\n      type: Number,\n      default: 310,\n    },\n    // canvas height\n    h: {\n      type: Number,\n      default: 155,\n    },\n    sliderText: {\n      type: String,\n      default: 'Slide filled right',\n    },\n    accuracy: {\n      type: Number,\n      default: 5, // 若为 -1 则不进行机器判断\n    },\n    show: {\n      type: Boolean,\n      default: true,\n    },\n    imgs: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      showCanvas: false,\n      containerActive: false, // container active class\n      containerSuccess: false, // container success class\n      containerFail: false, // container fail class\n      canvasCtx: null,\n      blockCtx: null,\n      block: null,\n      block_x: undefined, // container random position\n      block_y: undefined,\n      L: this.l + this.r * 2 + 3, // block real lenght\n      img: undefined,\n      originX: undefined,\n      originY: undefined,\n      isMouseDown: false,\n      trail: [],\n      sliderLeft: 0, // block right offset\n      sliderMaskWidth: 0, // mask width\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      this.initDom()\n      this.initImg()\n      this.bindEvents()\n    },\n    initDom() {\n      this.block = this.$refs.block;\n      this.canvasCtx = this.$refs.canvas.getContext('2d')\n      this.blockCtx = this.block.getContext('2d')\n    },\n    initImg() {\n      const img = this.createImg(() => {\n        this.drawBlock()\n        this.canvasCtx.drawImage(img, 0, 0, this.w, this.h)\n        this.blockCtx.drawImage(img, 0, 0, this.w, this.h)\n        let {\n          block_x: x,\n          block_y: y,\n          r,\n          L\n        } = this\n        let _y = y - r * 2 - 1\n        let ImageData = this.blockCtx.getImageData(x, _y, L, L);\n        this.block.width = L;\n        this.blockCtx.putImageData(ImageData, 0, _y)\n      });\n      this.img = img;\n    },\n    drawBlock() {\n      this.block_x = this.getRandomNumberByRange(this.L + 10, this.w - (this.L + 10))\n      this.block_y = this.getRandomNumberByRange(10 + this.r * 2, this.h - (this.L + 10))\n      this.draw(this.canvasCtx, this.block_x, this.block_y, 'fill')\n      this.draw(this.blockCtx, this.block_x, this.block_y, 'clip')\n    },\n    draw(ctx, x, y, operation) {\n      let {\n        l,\n        r\n      } = this;\n      ctx.beginPath()\n      ctx.moveTo(x, y)\n      ctx.arc(x + l / 2, y - r + 2, r, 0.72 * PI, 2.26 * PI)\n      ctx.lineTo(x + l, y)\n      ctx.arc(x + l + r - 2, y + l / 2, r, 1.21 * PI, 2.78 * PI)\n      ctx.lineTo(x + l, y + l)\n      ctx.lineTo(x, y + l)\n      ctx.arc(x + r - 2, y + l / 2, r + 0.4, 2.76 * PI, 1.24 * PI, true)\n      ctx.lineTo(x, y)\n      ctx.lineWidth = 2\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)'\n      ctx.stroke()\n      ctx[operation]()\n      ctx.globalCompositeOperation = 'overlay'\n    },\n    createImg(onload) {\n      const img = document.createElement('img');\n      img.crossOrigin = \"Anonymous\";\n      img.onload = onload;\n      img.onerror = () => {\n        img.src = this.getRandomImg()\n      }\n      img.src = this.getRandomImg()\n      return img;\n    },\n    // 随机生成img src\n    getRandomImg() {\n      const len = this.imgs.length;\n      return len > 0 ?\n        this.imgs[this.getRandomNumberByRange(0, len)] :\n        'https://picsum.photos/300/150/?image=' + this.getRandomNumberByRange(0, 1084);\n    },\n    getRandomNumberByRange(start, end) {\n      return Math.round(Math.random() * (end - start) + start)\n    },\n    refresh() {\n      this.reset()\n      this.$emit('refresh')\n    },\n    sliderDown(event) {\n      this.originX = event.clientX;\n      this.originY = event.clientY;\n      this.isMouseDown = true;\n    },\n    touchStartEvent(e) {\n      this.originX = e.changedTouches[0].pageX;\n      this.originY = e.changedTouches[0].pageY;\n      this.isMouseDown = true;\n    },\n    bindEvents() {\n      document.addEventListener('mousemove', (e) => {\n        if (!this.isMouseDown) return false;\n        const moveX = e.clientX - this.originX;\n        const moveY = e.clientY - this.originY;\n        if (moveX < 0 || moveX + 38 >= this.w) return false;\n        this.sliderLeft = moveX + 'px';\n        let blockLeft = (this.w - 40 - 20) / (this.w - 40) * moveX;\n        this.block.style.left = blockLeft + 'px';\n\n        this.containerActive = true; // add active\n        this.sliderMaskWidth = moveX + 'px';\n        this.trail.push(moveY);\n      });\n      document.addEventListener('mouseup', (e) => {\n        if (!this.isMouseDown) return false\n        this.isMouseDown = false\n        if (e.clientX === this.originX) return false;\n        this.containerActive = false; // remove active\n\n        const {\n          spliced,\n          TuringTest\n        } = this.verify();\n        if (spliced) {\n          if (this.accuracy === -1) {\n            this.containerSuccess = true;\n            this.$emit('success');\n            return;\n          }\n          if (TuringTest) {\n            // succ\n            this.containerSuccess = true;\n            this.$emit('success')\n          } else {\n            this.containerFail = true;\n            this.$emit('again')\n          }\n        } else {\n          this.containerFail = true;\n          this.$emit('fail')\n          setTimeout(() => {\n            this.reset()\n          }, 1000)\n        }\n      })\n    },\n    touchMoveEvent(e) {\n      if (!this.isMouseDown) return false;\n      const moveX = e.changedTouches[0].pageX - this.originX;\n      const moveY = e.changedTouches[0].pageY - this.originY;\n      if (moveX < 0 || moveX + 38 >= this.w) return false;\n      this.sliderLeft = moveX + 'px';\n      let blockLeft = (this.w - 40 - 20) / (this.w - 40) * moveX;\n      this.block.style.left = blockLeft + 'px';\n\n      this.containerActive = true;\n      this.sliderMaskWidth = moveX + 'px';\n      this.trail.push(moveY);\n    },\n    touchEndEvent(e) {\n      if (!this.isMouseDown) return false\n      this.isMouseDown = false\n      if (e.changedTouches[0].pageX === this.originX) return false;\n      this.containerActive = false;\n      this.showCanvas = false\n      const {\n        spliced,\n        TuringTest\n      } = this.verify();\n      if (spliced) {\n        if (this.accuracy === -1) {\n          this.containerSuccess = true;\n          this.$emit('success');\n          return;\n        }\n        if (TuringTest) {\n          // succ\n          this.containerSuccess = true;\n          this.$emit('success')\n        } else {\n          this.containerFail = true;\n          this.$emit('again')\n        }\n      } else {\n        this.containerFail = true;\n        this.$emit('fail')\n        setTimeout(() => {\n          this.reset()\n        }, 1000)\n      }\n    },\n    verify() {\n      const arr = this.trail // drag y move distance\n      const average = arr.reduce(sum) / arr.length // average\n      const deviations = arr.map(x => x - average) // deviation array\n      const stddev = Math.sqrt(deviations.map(square).reduce(sum) / arr.length) // standard deviation\n      const left = parseInt(this.block.style.left)\n      const accuracy = this.accuracy <= 1 ? 1 : this.accuracy > 10 ? 10 : this.accuracy;\n      return {\n        spliced: Math.abs(left - this.block_x) <= accuracy,\n        TuringTest: average !== stddev, // equal => not person operate\n      }\n    },\n    reset() {\n      this.containerActive = false;\n      this.containerSuccess = false;\n      this.containerFail = false;\n      this.sliderLeft = 0;\n      this.block.style.left = 0;\n      this.sliderMaskWidth = 0;\n      // canvas\n      let {\n        w,\n        h\n      } = this;\n      this.canvasCtx.clearRect(0, 0, w, h)\n      this.blockCtx.clearRect(0, 0, w, h)\n      this.block.width = w\n\n      // generate img\n      this.img.src = this.getRandomImg();\n      this.$emit('fulfilled')\n    },\n  }\n}\n",null]}