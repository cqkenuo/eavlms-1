{"remainingRequest":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0毕设相关\\EAvLMS\\src\\layout\\components\\Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\0毕设相关\\EAvLMS\\src\\layout\\components\\Navbar.vue","mtime":1590745008966},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0毕设相关\\EAvLMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport Breadcrumb from '@/components/Breadcrumb'\nimport Hamburger from '@/components/Hamburger'\nimport Badge from '@/components/Badge'\nimport WebSocket from '../../utils/websocket'\n\nexport default {\n  components: {\n    Breadcrumb,\n    Hamburger,\n    Badge\n  },\n  computed: {\n    ...mapGetters([\n      'sidebar',\n      'avatar'\n    ])\n  },\n  data() {\n    return {\n      //消息数量\n      noticeLength: 0\n    }\n  },\n  created() {\n    WebSocket.init(this.onMessage)\n    //加载提示音\n    this.audio = new Audio(require('../../assets/audio/msg.mp3'))\n    this.audio.volume = 1 //音量，取值范围 0.1 到 1.0\n    let notice = JSON.parse(sessionStorage.getItem('notice'))\n    this.noticeLength = notice && notice.length || 0\n    //消息注册监听 对document对象新增一个监听\n    document.addEventListener('readMessage', (e) => {  //e是notice的自定义监听封装成的detail对象 里面暂时只有detail一个数据 可扩展\n      this.noticeLength = e.detail\n    })\n  },\n  methods: {\n    toggleSideBar() {\n      this.$store.dispatch('app/toggleSideBar')\n    },\n    logout() {\n      //退出前清除用户信息\n      sessionStorage.removeItem('user')\n      sessionStorage.removeItem('routes')\n      this.$router.replace(`/login`)\n    },\n    //点击消息提示图标进入消息列表\n    toNoticePage() {\n      this.$router.push('/notice')\n    },\n    //前端socket.onmessage 接收后端数据 然后回调onmessage函数展示\n    onMessage(data) {\n      this.$notify.warning({\n        title: '您有新的消息',\n        offset: 40,\n        dangerouslyUseHTMLString: true,\n        message: data.message\n      })\n      //播放提示音\n      this.audio.play()\n      let oldNotice = sessionStorage.getItem('notice')  //用户还未读的消息取出赋给oldNotice\n      //当oldNotice不为空并且解析oldNotice为对象也不为空（true），返回JSON.parse(oldNotice)的值，当前面两个判断有一个为空值返回[]数组\n      oldNotice = oldNotice && JSON.parse(oldNotice) || []\n      oldNotice.push(data)  //将新的消息添加进旧消息里\n      sessionStorage.setItem('notice', JSON.stringify(oldNotice))  //更新sessionstore里的notice\n      this.noticeLength = oldNotice.length\n    }\n  }\n}\n",null]}